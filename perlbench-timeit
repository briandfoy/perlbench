#!/usr/bin/perl -w

use strict;
use PerlBench qw(timeit);
use Getopt::Long qw(GetOptions);

my %opt;
GetOptions(\%opt,
   'repeat=n',
   'use-avg',
   'verbose',
   'print-loop-overhead',
) || usage();

my $code = shift || @ARGV;
usage() if @ARGV;

$code .= ";" unless $code =~ /;\s*$/;

my $res = timeit($code, repeat => $opt{repeat}, verbose => $opt{verbose});
die "Failed" unless $res;

my $t = $res->{$opt{use_avg} ? "avg" : "med"};
my $d = $res->{stddev}*2;
my $u = "s";
my $f = 1;

if ($t < 1e-6) {
    $f = 1e9;
    $u = "ns";
}
elsif ($t < 1e-3) {
    $f = 1e6;
    $u = "µs";
}
elsif ($t < 1) {
    $f = 1e3;
    $u = "ms";
}

if ($f != 1) {
    $_ *= $f for $t, $d;
}

my $p = 0;
if ($d < 0.03) {
    $p = 3;
}
elsif ($d < 0.3) {
    $p = 2;
}
elsif ($d < 3) {
    $p = 1;
}
printf "%.*f %s ±%.*f\n", $p, $t, $u, $p, $d;

if (my $o = $res->{loop_overhead_relative}) {
    $o *= 100;
    printf "(%.*f%% loop overhead)\n", ($o > 10 ? 0 : 1), $o
	if $o > 10 || $opt{'print-loop-overhead'};
}

if (0) {
    require Data::Dump;
    delete $res->{x};
    delete $res->{t};
    Data::Dump::dump($res);
}

sub usage {
    (my $progname = $0) =~ s,.*/,,;
    die "Usage: $progname [options] <perlcode>\n";
}
