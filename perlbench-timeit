#!/usr/bin/perl -w

use strict;
use PerlBench qw(timeit sec_f);
use Getopt::Long qw(GetOptions);

my %opt;
GetOptions(\%opt,
   'repeat=i',
   'enough=f',
   'show-avg',
   'verbose+',
   'print-loop-overhead',
) || usage();

my $code = shift || usage();
usage() if @ARGV;

$code .= ";" unless $code =~ /;\s*$/;

my $res = timeit($code, repeat => $opt{repeat}, enough => $opt{enough}, verbose => $opt{verbose});
die "Failed" unless $res;

print "med = " if $opt{'show-avg'} || $opt{verbose};
print sec_f($res->{med}, $res->{med} - $res->{min}), "\n";
print "avg = ", sec_f($res->{avg}, 2 * $res->{stddev}), "\n" if $opt{'show-avg'} || $opt{verbose};

if (my $o = $res->{loop_overhead_relative}) {
    $o *= 100;
    if ($o > 10 || $opt{'print-loop-overhead'}) {
	printf "(%.*f%% loop overhead", ($o > 10 ? 0 : 1), $o;
	print ", try higher --repeat values" if $o > 10;
	print ")\n";
    }
}

if ($opt{verbose} && $opt{verbose} > 1 && eval { require Data::Dump }) {
    delete $res->{x};
    delete $res->{t};
    print "\n\$res = ", Data::Dump::dump($res), "\n";
}

sub usage {
    (my $progname = $0) =~ s,.*/,,;
    die "Usage: $progname [options] <perlcode>\n";
}
